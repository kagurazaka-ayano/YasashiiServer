// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BasicOperations.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_BasicOperations_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_BasicOperations_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_BasicOperations_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_BasicOperations_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_BasicOperations_2eproto;
namespace YasashiiServer {
class ConsumerSubscribeRequest;
struct ConsumerSubscribeRequestDefaultTypeInternal;
extern ConsumerSubscribeRequestDefaultTypeInternal _ConsumerSubscribeRequest_default_instance_;
class ConsumerSubscribeResponse;
struct ConsumerSubscribeResponseDefaultTypeInternal;
extern ConsumerSubscribeResponseDefaultTypeInternal _ConsumerSubscribeResponse_default_instance_;
class GetSafeTimeoutRequest;
struct GetSafeTimeoutRequestDefaultTypeInternal;
extern GetSafeTimeoutRequestDefaultTypeInternal _GetSafeTimeoutRequest_default_instance_;
class GetSafeTimeoutResponse;
struct GetSafeTimeoutResponseDefaultTypeInternal;
extern GetSafeTimeoutResponseDefaultTypeInternal _GetSafeTimeoutResponse_default_instance_;
class GetTimeoutRequest;
struct GetTimeoutRequestDefaultTypeInternal;
extern GetTimeoutRequestDefaultTypeInternal _GetTimeoutRequest_default_instance_;
class GetTimeoutResponse;
struct GetTimeoutResponseDefaultTypeInternal;
extern GetTimeoutResponseDefaultTypeInternal _GetTimeoutResponse_default_instance_;
class ProducerSubscribeRequest;
struct ProducerSubscribeRequestDefaultTypeInternal;
extern ProducerSubscribeRequestDefaultTypeInternal _ProducerSubscribeRequest_default_instance_;
class ProducerSubscribeResponse;
struct ProducerSubscribeResponseDefaultTypeInternal;
extern ProducerSubscribeResponseDefaultTypeInternal _ProducerSubscribeResponse_default_instance_;
class RelateRequest;
struct RelateRequestDefaultTypeInternal;
extern RelateRequestDefaultTypeInternal _RelateRequest_default_instance_;
class RelateResponse;
struct RelateResponseDefaultTypeInternal;
extern RelateResponseDefaultTypeInternal _RelateResponse_default_instance_;
class SetSafeTimeoutRequest;
struct SetSafeTimeoutRequestDefaultTypeInternal;
extern SetSafeTimeoutRequestDefaultTypeInternal _SetSafeTimeoutRequest_default_instance_;
class SetSafeTimeoutResponse;
struct SetSafeTimeoutResponseDefaultTypeInternal;
extern SetSafeTimeoutResponseDefaultTypeInternal _SetSafeTimeoutResponse_default_instance_;
class SetTimeoutRequest;
struct SetTimeoutRequestDefaultTypeInternal;
extern SetTimeoutRequestDefaultTypeInternal _SetTimeoutRequest_default_instance_;
class SetTimeoutResponse;
struct SetTimeoutResponseDefaultTypeInternal;
extern SetTimeoutResponseDefaultTypeInternal _SetTimeoutResponse_default_instance_;
class UnrelateRequest;
struct UnrelateRequestDefaultTypeInternal;
extern UnrelateRequestDefaultTypeInternal _UnrelateRequest_default_instance_;
class UnrelateResponse;
struct UnrelateResponseDefaultTypeInternal;
extern UnrelateResponseDefaultTypeInternal _UnrelateResponse_default_instance_;
}  // namespace YasashiiServer
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace YasashiiServer {

// ===================================================================


// -------------------------------------------------------------------

class UnrelateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.UnrelateResponse) */ {
 public:
  inline UnrelateResponse() : UnrelateResponse(nullptr) {}
  ~UnrelateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UnrelateResponse(::google::protobuf::internal::ConstantInitialized);

  inline UnrelateResponse(const UnrelateResponse& from)
      : UnrelateResponse(nullptr, from) {}
  UnrelateResponse(UnrelateResponse&& from) noexcept
    : UnrelateResponse() {
    *this = ::std::move(from);
  }

  inline UnrelateResponse& operator=(const UnrelateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnrelateResponse& operator=(UnrelateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnrelateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnrelateResponse* internal_default_instance() {
    return reinterpret_cast<const UnrelateResponse*>(
               &_UnrelateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnrelateResponse& a, UnrelateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnrelateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnrelateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnrelateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnrelateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnrelateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UnrelateResponse& from) {
    UnrelateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UnrelateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.UnrelateResponse";
  }
  protected:
  explicit UnrelateResponse(::google::protobuf::Arena* arena);
  UnrelateResponse(::google::protobuf::Arena* arena, const UnrelateResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kQueueFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string queue = 2;
  void clear_queue() ;
  const std::string& queue() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue(Arg_&& arg, Args_... args);
  std::string* mutable_queue();
  PROTOBUF_NODISCARD std::string* release_queue();
  void set_allocated_queue(std::string* value);

  private:
  const std::string& _internal_queue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue(
      const std::string& value);
  std::string* _internal_mutable_queue();

  public:
  // string error = 3;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.UnrelateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr queue_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class UnrelateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.UnrelateRequest) */ {
 public:
  inline UnrelateRequest() : UnrelateRequest(nullptr) {}
  ~UnrelateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UnrelateRequest(::google::protobuf::internal::ConstantInitialized);

  inline UnrelateRequest(const UnrelateRequest& from)
      : UnrelateRequest(nullptr, from) {}
  UnrelateRequest(UnrelateRequest&& from) noexcept
    : UnrelateRequest() {
    *this = ::std::move(from);
  }

  inline UnrelateRequest& operator=(const UnrelateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnrelateRequest& operator=(UnrelateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnrelateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnrelateRequest* internal_default_instance() {
    return reinterpret_cast<const UnrelateRequest*>(
               &_UnrelateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnrelateRequest& a, UnrelateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnrelateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnrelateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnrelateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnrelateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnrelateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UnrelateRequest& from) {
    UnrelateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UnrelateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.UnrelateRequest";
  }
  protected:
  explicit UnrelateRequest(::google::protobuf::Arena* arena);
  UnrelateRequest(::google::protobuf::Arena* arena, const UnrelateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string topic_name = 2;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.UnrelateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class SetTimeoutResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.SetTimeoutResponse) */ {
 public:
  inline SetTimeoutResponse() : SetTimeoutResponse(nullptr) {}
  ~SetTimeoutResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetTimeoutResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetTimeoutResponse(const SetTimeoutResponse& from)
      : SetTimeoutResponse(nullptr, from) {}
  SetTimeoutResponse(SetTimeoutResponse&& from) noexcept
    : SetTimeoutResponse() {
    *this = ::std::move(from);
  }

  inline SetTimeoutResponse& operator=(const SetTimeoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTimeoutResponse& operator=(SetTimeoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTimeoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTimeoutResponse* internal_default_instance() {
    return reinterpret_cast<const SetTimeoutResponse*>(
               &_SetTimeoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetTimeoutResponse& a, SetTimeoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTimeoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTimeoutResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTimeoutResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTimeoutResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetTimeoutResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetTimeoutResponse& from) {
    SetTimeoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetTimeoutResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.SetTimeoutResponse";
  }
  protected:
  explicit SetTimeoutResponse(::google::protobuf::Arena* arena);
  SetTimeoutResponse(::google::protobuf::Arena* arena, const SetTimeoutResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kErrorFieldNumber = 3,
    kTimeoutFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string error = 3;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // int64 timeout = 2;
  void clear_timeout() ;
  ::int64_t timeout() const;
  void set_timeout(::int64_t value);

  private:
  ::int64_t _internal_timeout() const;
  void _internal_set_timeout(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.SetTimeoutResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::int64_t timeout_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class SetTimeoutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.SetTimeoutRequest) */ {
 public:
  inline SetTimeoutRequest() : SetTimeoutRequest(nullptr) {}
  ~SetTimeoutRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetTimeoutRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetTimeoutRequest(const SetTimeoutRequest& from)
      : SetTimeoutRequest(nullptr, from) {}
  SetTimeoutRequest(SetTimeoutRequest&& from) noexcept
    : SetTimeoutRequest() {
    *this = ::std::move(from);
  }

  inline SetTimeoutRequest& operator=(const SetTimeoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTimeoutRequest& operator=(SetTimeoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTimeoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTimeoutRequest* internal_default_instance() {
    return reinterpret_cast<const SetTimeoutRequest*>(
               &_SetTimeoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetTimeoutRequest& a, SetTimeoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTimeoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTimeoutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTimeoutRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTimeoutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetTimeoutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetTimeoutRequest& from) {
    SetTimeoutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetTimeoutRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.SetTimeoutRequest";
  }
  protected:
  explicit SetTimeoutRequest(::google::protobuf::Arena* arena);
  SetTimeoutRequest(::google::protobuf::Arena* arena, const SetTimeoutRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // int64 timeout = 2;
  void clear_timeout() ;
  ::int64_t timeout() const;
  void set_timeout(::int64_t value);

  private:
  ::int64_t _internal_timeout() const;
  void _internal_set_timeout(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.SetTimeoutRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::int64_t timeout_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class SetSafeTimeoutResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.SetSafeTimeoutResponse) */ {
 public:
  inline SetSafeTimeoutResponse() : SetSafeTimeoutResponse(nullptr) {}
  ~SetSafeTimeoutResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetSafeTimeoutResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetSafeTimeoutResponse(const SetSafeTimeoutResponse& from)
      : SetSafeTimeoutResponse(nullptr, from) {}
  SetSafeTimeoutResponse(SetSafeTimeoutResponse&& from) noexcept
    : SetSafeTimeoutResponse() {
    *this = ::std::move(from);
  }

  inline SetSafeTimeoutResponse& operator=(const SetSafeTimeoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSafeTimeoutResponse& operator=(SetSafeTimeoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSafeTimeoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSafeTimeoutResponse* internal_default_instance() {
    return reinterpret_cast<const SetSafeTimeoutResponse*>(
               &_SetSafeTimeoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetSafeTimeoutResponse& a, SetSafeTimeoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSafeTimeoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSafeTimeoutResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSafeTimeoutResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSafeTimeoutResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetSafeTimeoutResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetSafeTimeoutResponse& from) {
    SetSafeTimeoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetSafeTimeoutResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.SetSafeTimeoutResponse";
  }
  protected:
  explicit SetSafeTimeoutResponse(::google::protobuf::Arena* arena);
  SetSafeTimeoutResponse(::google::protobuf::Arena* arena, const SetSafeTimeoutResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kErrorFieldNumber = 3,
    kTimeoutFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string error = 3;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // int64 timeout = 2;
  void clear_timeout() ;
  ::int64_t timeout() const;
  void set_timeout(::int64_t value);

  private:
  ::int64_t _internal_timeout() const;
  void _internal_set_timeout(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.SetSafeTimeoutResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::int64_t timeout_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class SetSafeTimeoutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.SetSafeTimeoutRequest) */ {
 public:
  inline SetSafeTimeoutRequest() : SetSafeTimeoutRequest(nullptr) {}
  ~SetSafeTimeoutRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetSafeTimeoutRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetSafeTimeoutRequest(const SetSafeTimeoutRequest& from)
      : SetSafeTimeoutRequest(nullptr, from) {}
  SetSafeTimeoutRequest(SetSafeTimeoutRequest&& from) noexcept
    : SetSafeTimeoutRequest() {
    *this = ::std::move(from);
  }

  inline SetSafeTimeoutRequest& operator=(const SetSafeTimeoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSafeTimeoutRequest& operator=(SetSafeTimeoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSafeTimeoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSafeTimeoutRequest* internal_default_instance() {
    return reinterpret_cast<const SetSafeTimeoutRequest*>(
               &_SetSafeTimeoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetSafeTimeoutRequest& a, SetSafeTimeoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSafeTimeoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSafeTimeoutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSafeTimeoutRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSafeTimeoutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetSafeTimeoutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetSafeTimeoutRequest& from) {
    SetSafeTimeoutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetSafeTimeoutRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.SetSafeTimeoutRequest";
  }
  protected:
  explicit SetSafeTimeoutRequest(::google::protobuf::Arena* arena);
  SetSafeTimeoutRequest(::google::protobuf::Arena* arena, const SetSafeTimeoutRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // int64 timeout = 2;
  void clear_timeout() ;
  ::int64_t timeout() const;
  void set_timeout(::int64_t value);

  private:
  ::int64_t _internal_timeout() const;
  void _internal_set_timeout(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.SetSafeTimeoutRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::int64_t timeout_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class RelateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.RelateResponse) */ {
 public:
  inline RelateResponse() : RelateResponse(nullptr) {}
  ~RelateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RelateResponse(::google::protobuf::internal::ConstantInitialized);

  inline RelateResponse(const RelateResponse& from)
      : RelateResponse(nullptr, from) {}
  RelateResponse(RelateResponse&& from) noexcept
    : RelateResponse() {
    *this = ::std::move(from);
  }

  inline RelateResponse& operator=(const RelateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelateResponse& operator=(RelateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelateResponse* internal_default_instance() {
    return reinterpret_cast<const RelateResponse*>(
               &_RelateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RelateResponse& a, RelateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RelateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RelateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RelateResponse& from) {
    RelateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RelateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.RelateResponse";
  }
  protected:
  explicit RelateResponse(::google::protobuf::Arena* arena);
  RelateResponse(::google::protobuf::Arena* arena, const RelateResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kQueueFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string queue = 2;
  void clear_queue() ;
  const std::string& queue() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue(Arg_&& arg, Args_... args);
  std::string* mutable_queue();
  PROTOBUF_NODISCARD std::string* release_queue();
  void set_allocated_queue(std::string* value);

  private:
  const std::string& _internal_queue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue(
      const std::string& value);
  std::string* _internal_mutable_queue();

  public:
  // string error = 3;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.RelateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr queue_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class RelateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.RelateRequest) */ {
 public:
  inline RelateRequest() : RelateRequest(nullptr) {}
  ~RelateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RelateRequest(::google::protobuf::internal::ConstantInitialized);

  inline RelateRequest(const RelateRequest& from)
      : RelateRequest(nullptr, from) {}
  RelateRequest(RelateRequest&& from) noexcept
    : RelateRequest() {
    *this = ::std::move(from);
  }

  inline RelateRequest& operator=(const RelateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelateRequest& operator=(RelateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelateRequest* internal_default_instance() {
    return reinterpret_cast<const RelateRequest*>(
               &_RelateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RelateRequest& a, RelateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RelateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RelateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RelateRequest& from) {
    RelateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RelateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.RelateRequest";
  }
  protected:
  explicit RelateRequest(::google::protobuf::Arena* arena);
  RelateRequest(::google::protobuf::Arena* arena, const RelateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string topic_name = 2;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.RelateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class ProducerSubscribeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.ProducerSubscribeResponse) */ {
 public:
  inline ProducerSubscribeResponse() : ProducerSubscribeResponse(nullptr) {}
  ~ProducerSubscribeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProducerSubscribeResponse(::google::protobuf::internal::ConstantInitialized);

  inline ProducerSubscribeResponse(const ProducerSubscribeResponse& from)
      : ProducerSubscribeResponse(nullptr, from) {}
  ProducerSubscribeResponse(ProducerSubscribeResponse&& from) noexcept
    : ProducerSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline ProducerSubscribeResponse& operator=(const ProducerSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProducerSubscribeResponse& operator=(ProducerSubscribeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProducerSubscribeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProducerSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const ProducerSubscribeResponse*>(
               &_ProducerSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProducerSubscribeResponse& a, ProducerSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProducerSubscribeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProducerSubscribeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProducerSubscribeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProducerSubscribeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProducerSubscribeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProducerSubscribeResponse& from) {
    ProducerSubscribeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProducerSubscribeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.ProducerSubscribeResponse";
  }
  protected:
  explicit ProducerSubscribeResponse(::google::protobuf::Arena* arena);
  ProducerSubscribeResponse(::google::protobuf::Arena* arena, const ProducerSubscribeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string producer_name = 1;
  void clear_producer_name() ;
  const std::string& producer_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_producer_name(Arg_&& arg, Args_... args);
  std::string* mutable_producer_name();
  PROTOBUF_NODISCARD std::string* release_producer_name();
  void set_allocated_producer_name(std::string* value);

  private:
  const std::string& _internal_producer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_name(
      const std::string& value);
  std::string* _internal_mutable_producer_name();

  public:
  // string topic_name = 2;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // string error = 3;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.ProducerSubscribeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      77, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr producer_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class ProducerSubscribeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.ProducerSubscribeRequest) */ {
 public:
  inline ProducerSubscribeRequest() : ProducerSubscribeRequest(nullptr) {}
  ~ProducerSubscribeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProducerSubscribeRequest(::google::protobuf::internal::ConstantInitialized);

  inline ProducerSubscribeRequest(const ProducerSubscribeRequest& from)
      : ProducerSubscribeRequest(nullptr, from) {}
  ProducerSubscribeRequest(ProducerSubscribeRequest&& from) noexcept
    : ProducerSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline ProducerSubscribeRequest& operator=(const ProducerSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProducerSubscribeRequest& operator=(ProducerSubscribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProducerSubscribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProducerSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const ProducerSubscribeRequest*>(
               &_ProducerSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProducerSubscribeRequest& a, ProducerSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProducerSubscribeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProducerSubscribeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProducerSubscribeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProducerSubscribeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProducerSubscribeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProducerSubscribeRequest& from) {
    ProducerSubscribeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProducerSubscribeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.ProducerSubscribeRequest";
  }
  protected:
  explicit ProducerSubscribeRequest(::google::protobuf::Arena* arena);
  ProducerSubscribeRequest(::google::protobuf::Arena* arena, const ProducerSubscribeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
  };
  // string producer_name = 1;
  void clear_producer_name() ;
  const std::string& producer_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_producer_name(Arg_&& arg, Args_... args);
  std::string* mutable_producer_name();
  PROTOBUF_NODISCARD std::string* release_producer_name();
  void set_allocated_producer_name(std::string* value);

  private:
  const std::string& _internal_producer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_name(
      const std::string& value);
  std::string* _internal_mutable_producer_name();

  public:
  // string topic_name = 2;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.ProducerSubscribeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      71, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr producer_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class GetTimeoutResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.GetTimeoutResponse) */ {
 public:
  inline GetTimeoutResponse() : GetTimeoutResponse(nullptr) {}
  ~GetTimeoutResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTimeoutResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetTimeoutResponse(const GetTimeoutResponse& from)
      : GetTimeoutResponse(nullptr, from) {}
  GetTimeoutResponse(GetTimeoutResponse&& from) noexcept
    : GetTimeoutResponse() {
    *this = ::std::move(from);
  }

  inline GetTimeoutResponse& operator=(const GetTimeoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTimeoutResponse& operator=(GetTimeoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTimeoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTimeoutResponse* internal_default_instance() {
    return reinterpret_cast<const GetTimeoutResponse*>(
               &_GetTimeoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetTimeoutResponse& a, GetTimeoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTimeoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTimeoutResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTimeoutResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTimeoutResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTimeoutResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetTimeoutResponse& from) {
    GetTimeoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetTimeoutResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.GetTimeoutResponse";
  }
  protected:
  explicit GetTimeoutResponse(::google::protobuf::Arena* arena);
  GetTimeoutResponse(::google::protobuf::Arena* arena, const GetTimeoutResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kErrorFieldNumber = 3,
    kTimeoutFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string error = 3;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // int64 timeout = 2;
  void clear_timeout() ;
  ::int64_t timeout() const;
  void set_timeout(::int64_t value);

  private:
  ::int64_t _internal_timeout() const;
  void _internal_set_timeout(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.GetTimeoutResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::int64_t timeout_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class GetTimeoutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.GetTimeoutRequest) */ {
 public:
  inline GetTimeoutRequest() : GetTimeoutRequest(nullptr) {}
  ~GetTimeoutRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTimeoutRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetTimeoutRequest(const GetTimeoutRequest& from)
      : GetTimeoutRequest(nullptr, from) {}
  GetTimeoutRequest(GetTimeoutRequest&& from) noexcept
    : GetTimeoutRequest() {
    *this = ::std::move(from);
  }

  inline GetTimeoutRequest& operator=(const GetTimeoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTimeoutRequest& operator=(GetTimeoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTimeoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTimeoutRequest* internal_default_instance() {
    return reinterpret_cast<const GetTimeoutRequest*>(
               &_GetTimeoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetTimeoutRequest& a, GetTimeoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTimeoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTimeoutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTimeoutRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTimeoutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTimeoutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetTimeoutRequest& from) {
    GetTimeoutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetTimeoutRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.GetTimeoutRequest";
  }
  protected:
  explicit GetTimeoutRequest(::google::protobuf::Arena* arena);
  GetTimeoutRequest(::google::protobuf::Arena* arena, const GetTimeoutRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.GetTimeoutRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class GetSafeTimeoutResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.GetSafeTimeoutResponse) */ {
 public:
  inline GetSafeTimeoutResponse() : GetSafeTimeoutResponse(nullptr) {}
  ~GetSafeTimeoutResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetSafeTimeoutResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetSafeTimeoutResponse(const GetSafeTimeoutResponse& from)
      : GetSafeTimeoutResponse(nullptr, from) {}
  GetSafeTimeoutResponse(GetSafeTimeoutResponse&& from) noexcept
    : GetSafeTimeoutResponse() {
    *this = ::std::move(from);
  }

  inline GetSafeTimeoutResponse& operator=(const GetSafeTimeoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSafeTimeoutResponse& operator=(GetSafeTimeoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSafeTimeoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSafeTimeoutResponse* internal_default_instance() {
    return reinterpret_cast<const GetSafeTimeoutResponse*>(
               &_GetSafeTimeoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetSafeTimeoutResponse& a, GetSafeTimeoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSafeTimeoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSafeTimeoutResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSafeTimeoutResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSafeTimeoutResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetSafeTimeoutResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetSafeTimeoutResponse& from) {
    GetSafeTimeoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetSafeTimeoutResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.GetSafeTimeoutResponse";
  }
  protected:
  explicit GetSafeTimeoutResponse(::google::protobuf::Arena* arena);
  GetSafeTimeoutResponse(::google::protobuf::Arena* arena, const GetSafeTimeoutResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kErrorFieldNumber = 3,
    kTimeoutFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string error = 3;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // int64 timeout = 2;
  void clear_timeout() ;
  ::int64_t timeout() const;
  void set_timeout(::int64_t value);

  private:
  ::int64_t _internal_timeout() const;
  void _internal_set_timeout(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.GetSafeTimeoutResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::int64_t timeout_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class GetSafeTimeoutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.GetSafeTimeoutRequest) */ {
 public:
  inline GetSafeTimeoutRequest() : GetSafeTimeoutRequest(nullptr) {}
  ~GetSafeTimeoutRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetSafeTimeoutRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetSafeTimeoutRequest(const GetSafeTimeoutRequest& from)
      : GetSafeTimeoutRequest(nullptr, from) {}
  GetSafeTimeoutRequest(GetSafeTimeoutRequest&& from) noexcept
    : GetSafeTimeoutRequest() {
    *this = ::std::move(from);
  }

  inline GetSafeTimeoutRequest& operator=(const GetSafeTimeoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSafeTimeoutRequest& operator=(GetSafeTimeoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSafeTimeoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSafeTimeoutRequest* internal_default_instance() {
    return reinterpret_cast<const GetSafeTimeoutRequest*>(
               &_GetSafeTimeoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetSafeTimeoutRequest& a, GetSafeTimeoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSafeTimeoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSafeTimeoutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSafeTimeoutRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSafeTimeoutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetSafeTimeoutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetSafeTimeoutRequest& from) {
    GetSafeTimeoutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetSafeTimeoutRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.GetSafeTimeoutRequest";
  }
  protected:
  explicit GetSafeTimeoutRequest(::google::protobuf::Arena* arena);
  GetSafeTimeoutRequest(::google::protobuf::Arena* arena, const GetSafeTimeoutRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.GetSafeTimeoutRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class ConsumerSubscribeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.ConsumerSubscribeResponse) */ {
 public:
  inline ConsumerSubscribeResponse() : ConsumerSubscribeResponse(nullptr) {}
  ~ConsumerSubscribeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConsumerSubscribeResponse(::google::protobuf::internal::ConstantInitialized);

  inline ConsumerSubscribeResponse(const ConsumerSubscribeResponse& from)
      : ConsumerSubscribeResponse(nullptr, from) {}
  ConsumerSubscribeResponse(ConsumerSubscribeResponse&& from) noexcept
    : ConsumerSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline ConsumerSubscribeResponse& operator=(const ConsumerSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumerSubscribeResponse& operator=(ConsumerSubscribeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsumerSubscribeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsumerSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const ConsumerSubscribeResponse*>(
               &_ConsumerSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConsumerSubscribeResponse& a, ConsumerSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsumerSubscribeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsumerSubscribeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsumerSubscribeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsumerSubscribeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConsumerSubscribeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConsumerSubscribeResponse& from) {
    ConsumerSubscribeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConsumerSubscribeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.ConsumerSubscribeResponse";
  }
  protected:
  explicit ConsumerSubscribeResponse(::google::protobuf::Arena* arena);
  ConsumerSubscribeResponse(::google::protobuf::Arena* arena, const ConsumerSubscribeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumerNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string consumer_name = 1;
  void clear_consumer_name() ;
  const std::string& consumer_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_consumer_name(Arg_&& arg, Args_... args);
  std::string* mutable_consumer_name();
  PROTOBUF_NODISCARD std::string* release_consumer_name();
  void set_allocated_consumer_name(std::string* value);

  private:
  const std::string& _internal_consumer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumer_name(
      const std::string& value);
  std::string* _internal_mutable_consumer_name();

  public:
  // string topic_name = 2;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // string error = 3;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.ConsumerSubscribeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      77, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr consumer_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};// -------------------------------------------------------------------

class ConsumerSubscribeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YasashiiServer.ConsumerSubscribeRequest) */ {
 public:
  inline ConsumerSubscribeRequest() : ConsumerSubscribeRequest(nullptr) {}
  ~ConsumerSubscribeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConsumerSubscribeRequest(::google::protobuf::internal::ConstantInitialized);

  inline ConsumerSubscribeRequest(const ConsumerSubscribeRequest& from)
      : ConsumerSubscribeRequest(nullptr, from) {}
  ConsumerSubscribeRequest(ConsumerSubscribeRequest&& from) noexcept
    : ConsumerSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline ConsumerSubscribeRequest& operator=(const ConsumerSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumerSubscribeRequest& operator=(ConsumerSubscribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsumerSubscribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsumerSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const ConsumerSubscribeRequest*>(
               &_ConsumerSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConsumerSubscribeRequest& a, ConsumerSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsumerSubscribeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsumerSubscribeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsumerSubscribeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsumerSubscribeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConsumerSubscribeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConsumerSubscribeRequest& from) {
    ConsumerSubscribeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConsumerSubscribeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "YasashiiServer.ConsumerSubscribeRequest";
  }
  protected:
  explicit ConsumerSubscribeRequest(::google::protobuf::Arena* arena);
  ConsumerSubscribeRequest(::google::protobuf::Arena* arena, const ConsumerSubscribeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumerNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
  };
  // string consumer_name = 1;
  void clear_consumer_name() ;
  const std::string& consumer_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_consumer_name(Arg_&& arg, Args_... args);
  std::string* mutable_consumer_name();
  PROTOBUF_NODISCARD std::string* release_consumer_name();
  void set_allocated_consumer_name(std::string* value);

  private:
  const std::string& _internal_consumer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumer_name(
      const std::string& value);
  std::string* _internal_mutable_consumer_name();

  public:
  // string topic_name = 2;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // @@protoc_insertion_point(class_scope:YasashiiServer.ConsumerSubscribeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      71, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr consumer_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BasicOperations_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RelateRequest

// string queue_name = 1;
inline void RelateRequest::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& RelateRequest::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.RelateRequest.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RelateRequest::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.RelateRequest.queue_name)
}
inline std::string* RelateRequest::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.RelateRequest.queue_name)
  return _s;
}
inline const std::string& RelateRequest::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void RelateRequest::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* RelateRequest::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* RelateRequest::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.RelateRequest.queue_name)
  return _impl_.queue_name_.Release();
}
inline void RelateRequest::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.RelateRequest.queue_name)
}

// string topic_name = 2;
inline void RelateRequest::clear_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& RelateRequest::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.RelateRequest.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RelateRequest::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.RelateRequest.topic_name)
}
inline std::string* RelateRequest::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.RelateRequest.topic_name)
  return _s;
}
inline const std::string& RelateRequest::_internal_topic_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_name_.Get();
}
inline void RelateRequest::_internal_set_topic_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* RelateRequest::_internal_mutable_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* RelateRequest::release_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.RelateRequest.topic_name)
  return _impl_.topic_name_.Release();
}
inline void RelateRequest::set_allocated_topic_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_name_.IsDefault()) {
          _impl_.topic_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.RelateRequest.topic_name)
}

// -------------------------------------------------------------------

// RelateResponse

// string queue_name = 1;
inline void RelateResponse::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& RelateResponse::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.RelateResponse.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RelateResponse::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.RelateResponse.queue_name)
}
inline std::string* RelateResponse::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.RelateResponse.queue_name)
  return _s;
}
inline const std::string& RelateResponse::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void RelateResponse::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* RelateResponse::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* RelateResponse::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.RelateResponse.queue_name)
  return _impl_.queue_name_.Release();
}
inline void RelateResponse::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.RelateResponse.queue_name)
}

// string queue = 2;
inline void RelateResponse::clear_queue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_.ClearToEmpty();
}
inline const std::string& RelateResponse::queue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.RelateResponse.queue)
  return _internal_queue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RelateResponse::set_queue(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.RelateResponse.queue)
}
inline std::string* RelateResponse::mutable_queue() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.RelateResponse.queue)
  return _s;
}
inline const std::string& RelateResponse::_internal_queue() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_.Get();
}
inline void RelateResponse::_internal_set_queue(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_.Set(value, GetArena());
}
inline std::string* RelateResponse::_internal_mutable_queue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_.Mutable( GetArena());
}
inline std::string* RelateResponse::release_queue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.RelateResponse.queue)
  return _impl_.queue_.Release();
}
inline void RelateResponse::set_allocated_queue(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_.IsDefault()) {
          _impl_.queue_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.RelateResponse.queue)
}

// string error = 3;
inline void RelateResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& RelateResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.RelateResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RelateResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.RelateResponse.error)
}
inline std::string* RelateResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.RelateResponse.error)
  return _s;
}
inline const std::string& RelateResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void RelateResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* RelateResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* RelateResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.RelateResponse.error)
  return _impl_.error_.Release();
}
inline void RelateResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.RelateResponse.error)
}

// -------------------------------------------------------------------

// UnrelateRequest

// string queue_name = 1;
inline void UnrelateRequest::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& UnrelateRequest::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.UnrelateRequest.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnrelateRequest::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.UnrelateRequest.queue_name)
}
inline std::string* UnrelateRequest::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.UnrelateRequest.queue_name)
  return _s;
}
inline const std::string& UnrelateRequest::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void UnrelateRequest::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* UnrelateRequest::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* UnrelateRequest::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.UnrelateRequest.queue_name)
  return _impl_.queue_name_.Release();
}
inline void UnrelateRequest::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.UnrelateRequest.queue_name)
}

// string topic_name = 2;
inline void UnrelateRequest::clear_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& UnrelateRequest::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.UnrelateRequest.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnrelateRequest::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.UnrelateRequest.topic_name)
}
inline std::string* UnrelateRequest::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.UnrelateRequest.topic_name)
  return _s;
}
inline const std::string& UnrelateRequest::_internal_topic_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_name_.Get();
}
inline void UnrelateRequest::_internal_set_topic_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* UnrelateRequest::_internal_mutable_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* UnrelateRequest::release_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.UnrelateRequest.topic_name)
  return _impl_.topic_name_.Release();
}
inline void UnrelateRequest::set_allocated_topic_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_name_.IsDefault()) {
          _impl_.topic_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.UnrelateRequest.topic_name)
}

// -------------------------------------------------------------------

// UnrelateResponse

// string queue_name = 1;
inline void UnrelateResponse::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& UnrelateResponse::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.UnrelateResponse.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnrelateResponse::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.UnrelateResponse.queue_name)
}
inline std::string* UnrelateResponse::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.UnrelateResponse.queue_name)
  return _s;
}
inline const std::string& UnrelateResponse::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void UnrelateResponse::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* UnrelateResponse::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* UnrelateResponse::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.UnrelateResponse.queue_name)
  return _impl_.queue_name_.Release();
}
inline void UnrelateResponse::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.UnrelateResponse.queue_name)
}

// string queue = 2;
inline void UnrelateResponse::clear_queue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_.ClearToEmpty();
}
inline const std::string& UnrelateResponse::queue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.UnrelateResponse.queue)
  return _internal_queue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnrelateResponse::set_queue(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.UnrelateResponse.queue)
}
inline std::string* UnrelateResponse::mutable_queue() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.UnrelateResponse.queue)
  return _s;
}
inline const std::string& UnrelateResponse::_internal_queue() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_.Get();
}
inline void UnrelateResponse::_internal_set_queue(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_.Set(value, GetArena());
}
inline std::string* UnrelateResponse::_internal_mutable_queue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_.Mutable( GetArena());
}
inline std::string* UnrelateResponse::release_queue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.UnrelateResponse.queue)
  return _impl_.queue_.Release();
}
inline void UnrelateResponse::set_allocated_queue(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_.IsDefault()) {
          _impl_.queue_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.UnrelateResponse.queue)
}

// string error = 3;
inline void UnrelateResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& UnrelateResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.UnrelateResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnrelateResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.UnrelateResponse.error)
}
inline std::string* UnrelateResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.UnrelateResponse.error)
  return _s;
}
inline const std::string& UnrelateResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void UnrelateResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* UnrelateResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* UnrelateResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.UnrelateResponse.error)
  return _impl_.error_.Release();
}
inline void UnrelateResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.UnrelateResponse.error)
}

// -------------------------------------------------------------------

// ConsumerSubscribeRequest

// string consumer_name = 1;
inline void ConsumerSubscribeRequest::clear_consumer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.consumer_name_.ClearToEmpty();
}
inline const std::string& ConsumerSubscribeRequest::consumer_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ConsumerSubscribeRequest.consumer_name)
  return _internal_consumer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConsumerSubscribeRequest::set_consumer_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.consumer_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ConsumerSubscribeRequest.consumer_name)
}
inline std::string* ConsumerSubscribeRequest::mutable_consumer_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_consumer_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ConsumerSubscribeRequest.consumer_name)
  return _s;
}
inline const std::string& ConsumerSubscribeRequest::_internal_consumer_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.consumer_name_.Get();
}
inline void ConsumerSubscribeRequest::_internal_set_consumer_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.consumer_name_.Set(value, GetArena());
}
inline std::string* ConsumerSubscribeRequest::_internal_mutable_consumer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.consumer_name_.Mutable( GetArena());
}
inline std::string* ConsumerSubscribeRequest::release_consumer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ConsumerSubscribeRequest.consumer_name)
  return _impl_.consumer_name_.Release();
}
inline void ConsumerSubscribeRequest::set_allocated_consumer_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.consumer_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.consumer_name_.IsDefault()) {
          _impl_.consumer_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ConsumerSubscribeRequest.consumer_name)
}

// string topic_name = 2;
inline void ConsumerSubscribeRequest::clear_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& ConsumerSubscribeRequest::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ConsumerSubscribeRequest.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConsumerSubscribeRequest::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ConsumerSubscribeRequest.topic_name)
}
inline std::string* ConsumerSubscribeRequest::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ConsumerSubscribeRequest.topic_name)
  return _s;
}
inline const std::string& ConsumerSubscribeRequest::_internal_topic_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_name_.Get();
}
inline void ConsumerSubscribeRequest::_internal_set_topic_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* ConsumerSubscribeRequest::_internal_mutable_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* ConsumerSubscribeRequest::release_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ConsumerSubscribeRequest.topic_name)
  return _impl_.topic_name_.Release();
}
inline void ConsumerSubscribeRequest::set_allocated_topic_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_name_.IsDefault()) {
          _impl_.topic_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ConsumerSubscribeRequest.topic_name)
}

// -------------------------------------------------------------------

// ConsumerSubscribeResponse

// string consumer_name = 1;
inline void ConsumerSubscribeResponse::clear_consumer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.consumer_name_.ClearToEmpty();
}
inline const std::string& ConsumerSubscribeResponse::consumer_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ConsumerSubscribeResponse.consumer_name)
  return _internal_consumer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConsumerSubscribeResponse::set_consumer_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.consumer_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ConsumerSubscribeResponse.consumer_name)
}
inline std::string* ConsumerSubscribeResponse::mutable_consumer_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_consumer_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ConsumerSubscribeResponse.consumer_name)
  return _s;
}
inline const std::string& ConsumerSubscribeResponse::_internal_consumer_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.consumer_name_.Get();
}
inline void ConsumerSubscribeResponse::_internal_set_consumer_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.consumer_name_.Set(value, GetArena());
}
inline std::string* ConsumerSubscribeResponse::_internal_mutable_consumer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.consumer_name_.Mutable( GetArena());
}
inline std::string* ConsumerSubscribeResponse::release_consumer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ConsumerSubscribeResponse.consumer_name)
  return _impl_.consumer_name_.Release();
}
inline void ConsumerSubscribeResponse::set_allocated_consumer_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.consumer_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.consumer_name_.IsDefault()) {
          _impl_.consumer_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ConsumerSubscribeResponse.consumer_name)
}

// string topic_name = 2;
inline void ConsumerSubscribeResponse::clear_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& ConsumerSubscribeResponse::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ConsumerSubscribeResponse.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConsumerSubscribeResponse::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ConsumerSubscribeResponse.topic_name)
}
inline std::string* ConsumerSubscribeResponse::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ConsumerSubscribeResponse.topic_name)
  return _s;
}
inline const std::string& ConsumerSubscribeResponse::_internal_topic_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_name_.Get();
}
inline void ConsumerSubscribeResponse::_internal_set_topic_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* ConsumerSubscribeResponse::_internal_mutable_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* ConsumerSubscribeResponse::release_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ConsumerSubscribeResponse.topic_name)
  return _impl_.topic_name_.Release();
}
inline void ConsumerSubscribeResponse::set_allocated_topic_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_name_.IsDefault()) {
          _impl_.topic_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ConsumerSubscribeResponse.topic_name)
}

// string error = 3;
inline void ConsumerSubscribeResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& ConsumerSubscribeResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ConsumerSubscribeResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConsumerSubscribeResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ConsumerSubscribeResponse.error)
}
inline std::string* ConsumerSubscribeResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ConsumerSubscribeResponse.error)
  return _s;
}
inline const std::string& ConsumerSubscribeResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void ConsumerSubscribeResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* ConsumerSubscribeResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* ConsumerSubscribeResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ConsumerSubscribeResponse.error)
  return _impl_.error_.Release();
}
inline void ConsumerSubscribeResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ConsumerSubscribeResponse.error)
}

// -------------------------------------------------------------------

// ProducerSubscribeRequest

// string producer_name = 1;
inline void ProducerSubscribeRequest::clear_producer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.producer_name_.ClearToEmpty();
}
inline const std::string& ProducerSubscribeRequest::producer_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ProducerSubscribeRequest.producer_name)
  return _internal_producer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProducerSubscribeRequest::set_producer_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.producer_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ProducerSubscribeRequest.producer_name)
}
inline std::string* ProducerSubscribeRequest::mutable_producer_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_producer_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ProducerSubscribeRequest.producer_name)
  return _s;
}
inline const std::string& ProducerSubscribeRequest::_internal_producer_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.producer_name_.Get();
}
inline void ProducerSubscribeRequest::_internal_set_producer_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.producer_name_.Set(value, GetArena());
}
inline std::string* ProducerSubscribeRequest::_internal_mutable_producer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.producer_name_.Mutable( GetArena());
}
inline std::string* ProducerSubscribeRequest::release_producer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ProducerSubscribeRequest.producer_name)
  return _impl_.producer_name_.Release();
}
inline void ProducerSubscribeRequest::set_allocated_producer_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.producer_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.producer_name_.IsDefault()) {
          _impl_.producer_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ProducerSubscribeRequest.producer_name)
}

// string topic_name = 2;
inline void ProducerSubscribeRequest::clear_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& ProducerSubscribeRequest::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ProducerSubscribeRequest.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProducerSubscribeRequest::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ProducerSubscribeRequest.topic_name)
}
inline std::string* ProducerSubscribeRequest::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ProducerSubscribeRequest.topic_name)
  return _s;
}
inline const std::string& ProducerSubscribeRequest::_internal_topic_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_name_.Get();
}
inline void ProducerSubscribeRequest::_internal_set_topic_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* ProducerSubscribeRequest::_internal_mutable_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* ProducerSubscribeRequest::release_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ProducerSubscribeRequest.topic_name)
  return _impl_.topic_name_.Release();
}
inline void ProducerSubscribeRequest::set_allocated_topic_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_name_.IsDefault()) {
          _impl_.topic_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ProducerSubscribeRequest.topic_name)
}

// -------------------------------------------------------------------

// ProducerSubscribeResponse

// string producer_name = 1;
inline void ProducerSubscribeResponse::clear_producer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.producer_name_.ClearToEmpty();
}
inline const std::string& ProducerSubscribeResponse::producer_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ProducerSubscribeResponse.producer_name)
  return _internal_producer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProducerSubscribeResponse::set_producer_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.producer_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ProducerSubscribeResponse.producer_name)
}
inline std::string* ProducerSubscribeResponse::mutable_producer_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_producer_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ProducerSubscribeResponse.producer_name)
  return _s;
}
inline const std::string& ProducerSubscribeResponse::_internal_producer_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.producer_name_.Get();
}
inline void ProducerSubscribeResponse::_internal_set_producer_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.producer_name_.Set(value, GetArena());
}
inline std::string* ProducerSubscribeResponse::_internal_mutable_producer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.producer_name_.Mutable( GetArena());
}
inline std::string* ProducerSubscribeResponse::release_producer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ProducerSubscribeResponse.producer_name)
  return _impl_.producer_name_.Release();
}
inline void ProducerSubscribeResponse::set_allocated_producer_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.producer_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.producer_name_.IsDefault()) {
          _impl_.producer_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ProducerSubscribeResponse.producer_name)
}

// string topic_name = 2;
inline void ProducerSubscribeResponse::clear_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& ProducerSubscribeResponse::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ProducerSubscribeResponse.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProducerSubscribeResponse::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ProducerSubscribeResponse.topic_name)
}
inline std::string* ProducerSubscribeResponse::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ProducerSubscribeResponse.topic_name)
  return _s;
}
inline const std::string& ProducerSubscribeResponse::_internal_topic_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_name_.Get();
}
inline void ProducerSubscribeResponse::_internal_set_topic_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* ProducerSubscribeResponse::_internal_mutable_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* ProducerSubscribeResponse::release_topic_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ProducerSubscribeResponse.topic_name)
  return _impl_.topic_name_.Release();
}
inline void ProducerSubscribeResponse::set_allocated_topic_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_name_.IsDefault()) {
          _impl_.topic_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ProducerSubscribeResponse.topic_name)
}

// string error = 3;
inline void ProducerSubscribeResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& ProducerSubscribeResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.ProducerSubscribeResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProducerSubscribeResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.ProducerSubscribeResponse.error)
}
inline std::string* ProducerSubscribeResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.ProducerSubscribeResponse.error)
  return _s;
}
inline const std::string& ProducerSubscribeResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void ProducerSubscribeResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* ProducerSubscribeResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* ProducerSubscribeResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.ProducerSubscribeResponse.error)
  return _impl_.error_.Release();
}
inline void ProducerSubscribeResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.ProducerSubscribeResponse.error)
}

// -------------------------------------------------------------------

// SetTimeoutRequest

// string queue_name = 1;
inline void SetTimeoutRequest::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& SetTimeoutRequest::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetTimeoutRequest.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetTimeoutRequest::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.SetTimeoutRequest.queue_name)
}
inline std::string* SetTimeoutRequest::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.SetTimeoutRequest.queue_name)
  return _s;
}
inline const std::string& SetTimeoutRequest::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void SetTimeoutRequest::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* SetTimeoutRequest::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* SetTimeoutRequest::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.SetTimeoutRequest.queue_name)
  return _impl_.queue_name_.Release();
}
inline void SetTimeoutRequest::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.SetTimeoutRequest.queue_name)
}

// int64 timeout = 2;
inline void SetTimeoutRequest::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = ::int64_t{0};
}
inline ::int64_t SetTimeoutRequest::timeout() const {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetTimeoutRequest.timeout)
  return _internal_timeout();
}
inline void SetTimeoutRequest::set_timeout(::int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:YasashiiServer.SetTimeoutRequest.timeout)
}
inline ::int64_t SetTimeoutRequest::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void SetTimeoutRequest::_internal_set_timeout(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// -------------------------------------------------------------------

// SetTimeoutResponse

// string queue_name = 1;
inline void SetTimeoutResponse::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& SetTimeoutResponse::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetTimeoutResponse.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetTimeoutResponse::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.SetTimeoutResponse.queue_name)
}
inline std::string* SetTimeoutResponse::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.SetTimeoutResponse.queue_name)
  return _s;
}
inline const std::string& SetTimeoutResponse::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void SetTimeoutResponse::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* SetTimeoutResponse::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* SetTimeoutResponse::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.SetTimeoutResponse.queue_name)
  return _impl_.queue_name_.Release();
}
inline void SetTimeoutResponse::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.SetTimeoutResponse.queue_name)
}

// int64 timeout = 2;
inline void SetTimeoutResponse::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = ::int64_t{0};
}
inline ::int64_t SetTimeoutResponse::timeout() const {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetTimeoutResponse.timeout)
  return _internal_timeout();
}
inline void SetTimeoutResponse::set_timeout(::int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:YasashiiServer.SetTimeoutResponse.timeout)
}
inline ::int64_t SetTimeoutResponse::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void SetTimeoutResponse::_internal_set_timeout(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// string error = 3;
inline void SetTimeoutResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& SetTimeoutResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetTimeoutResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetTimeoutResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.SetTimeoutResponse.error)
}
inline std::string* SetTimeoutResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.SetTimeoutResponse.error)
  return _s;
}
inline const std::string& SetTimeoutResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void SetTimeoutResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* SetTimeoutResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* SetTimeoutResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.SetTimeoutResponse.error)
  return _impl_.error_.Release();
}
inline void SetTimeoutResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.SetTimeoutResponse.error)
}

// -------------------------------------------------------------------

// SetSafeTimeoutRequest

// string queue_name = 1;
inline void SetSafeTimeoutRequest::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& SetSafeTimeoutRequest::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetSafeTimeoutRequest.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetSafeTimeoutRequest::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.SetSafeTimeoutRequest.queue_name)
}
inline std::string* SetSafeTimeoutRequest::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.SetSafeTimeoutRequest.queue_name)
  return _s;
}
inline const std::string& SetSafeTimeoutRequest::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void SetSafeTimeoutRequest::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* SetSafeTimeoutRequest::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* SetSafeTimeoutRequest::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.SetSafeTimeoutRequest.queue_name)
  return _impl_.queue_name_.Release();
}
inline void SetSafeTimeoutRequest::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.SetSafeTimeoutRequest.queue_name)
}

// int64 timeout = 2;
inline void SetSafeTimeoutRequest::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = ::int64_t{0};
}
inline ::int64_t SetSafeTimeoutRequest::timeout() const {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetSafeTimeoutRequest.timeout)
  return _internal_timeout();
}
inline void SetSafeTimeoutRequest::set_timeout(::int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:YasashiiServer.SetSafeTimeoutRequest.timeout)
}
inline ::int64_t SetSafeTimeoutRequest::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void SetSafeTimeoutRequest::_internal_set_timeout(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// -------------------------------------------------------------------

// SetSafeTimeoutResponse

// string queue_name = 1;
inline void SetSafeTimeoutResponse::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& SetSafeTimeoutResponse::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetSafeTimeoutResponse.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetSafeTimeoutResponse::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.SetSafeTimeoutResponse.queue_name)
}
inline std::string* SetSafeTimeoutResponse::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.SetSafeTimeoutResponse.queue_name)
  return _s;
}
inline const std::string& SetSafeTimeoutResponse::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void SetSafeTimeoutResponse::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* SetSafeTimeoutResponse::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* SetSafeTimeoutResponse::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.SetSafeTimeoutResponse.queue_name)
  return _impl_.queue_name_.Release();
}
inline void SetSafeTimeoutResponse::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.SetSafeTimeoutResponse.queue_name)
}

// int64 timeout = 2;
inline void SetSafeTimeoutResponse::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = ::int64_t{0};
}
inline ::int64_t SetSafeTimeoutResponse::timeout() const {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetSafeTimeoutResponse.timeout)
  return _internal_timeout();
}
inline void SetSafeTimeoutResponse::set_timeout(::int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:YasashiiServer.SetSafeTimeoutResponse.timeout)
}
inline ::int64_t SetSafeTimeoutResponse::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void SetSafeTimeoutResponse::_internal_set_timeout(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// string error = 3;
inline void SetSafeTimeoutResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& SetSafeTimeoutResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.SetSafeTimeoutResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetSafeTimeoutResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.SetSafeTimeoutResponse.error)
}
inline std::string* SetSafeTimeoutResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.SetSafeTimeoutResponse.error)
  return _s;
}
inline const std::string& SetSafeTimeoutResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void SetSafeTimeoutResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* SetSafeTimeoutResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* SetSafeTimeoutResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.SetSafeTimeoutResponse.error)
  return _impl_.error_.Release();
}
inline void SetSafeTimeoutResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.SetSafeTimeoutResponse.error)
}

// -------------------------------------------------------------------

// GetTimeoutRequest

// string queue_name = 1;
inline void GetTimeoutRequest::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& GetTimeoutRequest::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.GetTimeoutRequest.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTimeoutRequest::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.GetTimeoutRequest.queue_name)
}
inline std::string* GetTimeoutRequest::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.GetTimeoutRequest.queue_name)
  return _s;
}
inline const std::string& GetTimeoutRequest::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void GetTimeoutRequest::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* GetTimeoutRequest::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* GetTimeoutRequest::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.GetTimeoutRequest.queue_name)
  return _impl_.queue_name_.Release();
}
inline void GetTimeoutRequest::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.GetTimeoutRequest.queue_name)
}

// -------------------------------------------------------------------

// GetTimeoutResponse

// string queue_name = 1;
inline void GetTimeoutResponse::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& GetTimeoutResponse::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.GetTimeoutResponse.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTimeoutResponse::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.GetTimeoutResponse.queue_name)
}
inline std::string* GetTimeoutResponse::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.GetTimeoutResponse.queue_name)
  return _s;
}
inline const std::string& GetTimeoutResponse::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void GetTimeoutResponse::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* GetTimeoutResponse::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* GetTimeoutResponse::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.GetTimeoutResponse.queue_name)
  return _impl_.queue_name_.Release();
}
inline void GetTimeoutResponse::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.GetTimeoutResponse.queue_name)
}

// int64 timeout = 2;
inline void GetTimeoutResponse::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = ::int64_t{0};
}
inline ::int64_t GetTimeoutResponse::timeout() const {
  // @@protoc_insertion_point(field_get:YasashiiServer.GetTimeoutResponse.timeout)
  return _internal_timeout();
}
inline void GetTimeoutResponse::set_timeout(::int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:YasashiiServer.GetTimeoutResponse.timeout)
}
inline ::int64_t GetTimeoutResponse::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void GetTimeoutResponse::_internal_set_timeout(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// string error = 3;
inline void GetTimeoutResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& GetTimeoutResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.GetTimeoutResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTimeoutResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.GetTimeoutResponse.error)
}
inline std::string* GetTimeoutResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.GetTimeoutResponse.error)
  return _s;
}
inline const std::string& GetTimeoutResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void GetTimeoutResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* GetTimeoutResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* GetTimeoutResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.GetTimeoutResponse.error)
  return _impl_.error_.Release();
}
inline void GetTimeoutResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.GetTimeoutResponse.error)
}

// -------------------------------------------------------------------

// GetSafeTimeoutRequest

// string queue_name = 1;
inline void GetSafeTimeoutRequest::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& GetSafeTimeoutRequest::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.GetSafeTimeoutRequest.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSafeTimeoutRequest::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.GetSafeTimeoutRequest.queue_name)
}
inline std::string* GetSafeTimeoutRequest::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.GetSafeTimeoutRequest.queue_name)
  return _s;
}
inline const std::string& GetSafeTimeoutRequest::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void GetSafeTimeoutRequest::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* GetSafeTimeoutRequest::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* GetSafeTimeoutRequest::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.GetSafeTimeoutRequest.queue_name)
  return _impl_.queue_name_.Release();
}
inline void GetSafeTimeoutRequest::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.GetSafeTimeoutRequest.queue_name)
}

// -------------------------------------------------------------------

// GetSafeTimeoutResponse

// string queue_name = 1;
inline void GetSafeTimeoutResponse::clear_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& GetSafeTimeoutResponse::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.GetSafeTimeoutResponse.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSafeTimeoutResponse::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.GetSafeTimeoutResponse.queue_name)
}
inline std::string* GetSafeTimeoutResponse::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.GetSafeTimeoutResponse.queue_name)
  return _s;
}
inline const std::string& GetSafeTimeoutResponse::_internal_queue_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.queue_name_.Get();
}
inline void GetSafeTimeoutResponse::_internal_set_queue_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* GetSafeTimeoutResponse::_internal_mutable_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* GetSafeTimeoutResponse::release_queue_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.GetSafeTimeoutResponse.queue_name)
  return _impl_.queue_name_.Release();
}
inline void GetSafeTimeoutResponse::set_allocated_queue_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.queue_name_.IsDefault()) {
          _impl_.queue_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.GetSafeTimeoutResponse.queue_name)
}

// int64 timeout = 2;
inline void GetSafeTimeoutResponse::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = ::int64_t{0};
}
inline ::int64_t GetSafeTimeoutResponse::timeout() const {
  // @@protoc_insertion_point(field_get:YasashiiServer.GetSafeTimeoutResponse.timeout)
  return _internal_timeout();
}
inline void GetSafeTimeoutResponse::set_timeout(::int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:YasashiiServer.GetSafeTimeoutResponse.timeout)
}
inline ::int64_t GetSafeTimeoutResponse::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void GetSafeTimeoutResponse::_internal_set_timeout(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// string error = 3;
inline void GetSafeTimeoutResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& GetSafeTimeoutResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:YasashiiServer.GetSafeTimeoutResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSafeTimeoutResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:YasashiiServer.GetSafeTimeoutResponse.error)
}
inline std::string* GetSafeTimeoutResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:YasashiiServer.GetSafeTimeoutResponse.error)
  return _s;
}
inline const std::string& GetSafeTimeoutResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void GetSafeTimeoutResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* GetSafeTimeoutResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* GetSafeTimeoutResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:YasashiiServer.GetSafeTimeoutResponse.error)
  return _impl_.error_.Release();
}
inline void GetSafeTimeoutResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:YasashiiServer.GetSafeTimeoutResponse.error)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace YasashiiServer


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_BasicOperations_2eproto_2epb_2eh
